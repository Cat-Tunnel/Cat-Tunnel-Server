/*
When a device is registered, key data to identify a device is
stored in the database. This will provide all device level authentication
functionality in future releases as well.
*/

package db

import "fmt"

// Device includes key information about the device.
// The DeviceID is auto generated by the database and is unique.
// The ConfigurationID assigns a device configuration to this device.
// Model and Manufacturer describe the type of device.
type Device struct {
	DeviceID        int32
	ConfigurationID int32
	Model           string
	Manufacturer    string
}

const getDevicesQuery string = `
	SELECT deviceid, 
			configurationid,
			model, 
			manufacturer
	FROM GetAllDevices()
	ORDER BY deviceid ASC
`

const deleteDeviceQuery string = `
	CALL deletedevicebyid($1);
`

const insertDeviceQuery string = `
	SELECT public.InsertNewDevice($1, $2);
`

// Grab all of the devices from the database
func GetAllDevices() ([]Device, error) {
	var (
		deviceID        int32
		configurationID int32
		model           string
		manufacturer    string
	)
	// Devices must be an empty array if no values are found
	devices := make([]Device, 0)

	// Pull down data from the devices database.
	rows, err := GetDB().Query(getDevicesQuery)
	if err != nil {
		// Return early if query execution fails for any reason.
		return nil, fmt.Errorf("error reading from database: %w", err)
	}

	defer rows.Close() // Ensure rows are closed after function execution.

	// Loop through each device and append to the devices return variable.
	for rows.Next() {

		err := rows.Scan(&deviceID, &configurationID, &model, &manufacturer)
		if err != nil {
			// Return early if the response from the query doesn't match
			// the expected format.
			return nil, fmt.Errorf("database not setup correctly: %w", err)
		}

		newDevice := Device{
			DeviceID:        deviceID,
			ConfigurationID: configurationID,
			Model:           model,
			Manufacturer:    manufacturer,
		}
		devices = append(devices, newDevice)
	}

	err = rows.Err()
	if err != nil {
		// Return early with an error if the connection breaks before all of the
		// data has been read into the return array.
		return nil, fmt.Errorf("connection lost early: %w", err)
	}

	// Return an array of devices.
	return devices, nil
}


// CreateDevice creates a new device, automatically assigns a default configuration, and
// returns the deviceID of the new device configuration.
func CreateDevice(model string, manufacturer string) (int32, error) {
	var newDeviceID int32
	
	// Execute the query and capture the return value.
	err := GetDB().QueryRow(insertDeviceQuery, model, manufacturer).Scan(&newDeviceID)
	if err != nil {
		fmt.Println(err)
		// Handle errors, such as no rows in the result set or any other issues.
		return 0, fmt.Errorf("error executing query: %w", err)
	}
	
	// Return the deviceID
	return newDeviceID, nil
	
}

// DeleteDevice removes a device with a specific ID.
func DeleteDevice(deviceID int32) error {

	// Remove the specified device
	_, err := GetDB().Exec(
		deleteDeviceQuery,
		deviceID,
	)

	if err != nil {
		fmt.Println(err)
		// Return an error if query execution fails for any reason.
		return fmt.Errorf("error writing to database: %w", err)
	}

	return nil
}
